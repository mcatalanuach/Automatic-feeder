#include <Wire.h>
#include <RTClib.h>
#include <WiFi.h>
#include <WebServer.h>
#include <ESP32Servo.h>

RTC_DS3231 rtc;
WebServer server(80);
Servo gateServo1;  // Gate 1
Servo gateServo2;  // Gate 2

// Pines
const int servoPin1 = 26; // GPIO26 pin for Gate 1
const int servoPin2 = 27; // GPIO27 pin for Gate 2

int horaAperturaGate1, minutoAperturaGate1;
int horaCierreGate1, minutoCierreGate1;

int horaAperturaGate2, minutoAperturaGate2;
int horaCierreGate2, minutoCierreGate2;

int anguloAperturaGate1 = 0;
int anguloCierreGate1 = 100;
int anguloAperturaGate2 = 0;
int anguloCierreGate2 = 100;

unsigned long lastMillis = 0;
const char* ssid = "Feeder1";
const char* password = "123456789";

struct Itinerario {
  int horaApertura;
  int minutoApertura;
  int horaCierre;
  int minutoCierre;
  bool activo; // Indica si el itinerario está activo o no
};

#define MAX_ITINERARIOS 3 // Máximo de 3 itinerarios por gate
Itinerario itinerariosGate1[MAX_ITINERARIOS];
Itinerario itinerariosGate2[MAX_ITINERARIOS];

void inicializarItinerarios() {
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    itinerariosGate1[i] = { -1, -1, -1, -1, false }; // Desactivado por defecto
    itinerariosGate2[i] = { -1, -1, -1, -1, false }; // Desactivado por defecto
  }
}

// Function declarations
void handleRoot();
void handleTime();
void handleSetTime();
void handleConfigurarCompuerta();
void handleGuardarConfiguracion();
void handleTestCompuerta();
void abrirGate1();
void cerrarGate1();
void abrirGate2();
void cerrarGate2();
void controlarCompuertaPorHorario();

void setup() {
  Serial.begin(115200);

  if (!rtc.begin()) {
    Serial.println("Error Initializing RTC");
    while (1); // Halt the program if RTC fails to initialize
  }

  WiFi.softAP(ssid, password);
  Serial.println("WiFi Network Created");

  gateServo1.attach(servoPin1);
  gateServo2.attach(servoPin2);

  inicializarItinerarios();

  server.on("/", handleRoot);
  server.on("/time", handleTime);
  server.on("/settime", handleSetTime);
  server.on("/configurarCompuerta", HTTP_GET, handleConfigurarCompuerta);
  server.on("/guardarConfiguracion", HTTP_GET, handleGuardarConfiguracion);
  server.on("/testCompuerta", HTTP_GET, handleTestCompuerta);
  server.on("/abrirGate1", HTTP_GET, abrirGate1);
  server.on("/cerrarGate1", HTTP_GET, cerrarGate1);
  server.on("/abrirGate2", HTTP_GET, abrirGate2);
  server.on("/cerrarGate2", HTTP_GET, cerrarGate2);

  server.begin();
  Serial.println("WIFI network started");
}

void loop() {
  server.handleClient();
  controlarCompuertaPorHorario();
}

void controlarCompuertaPorHorario() {
  DateTime now = rtc.now();
  int horaActual = now.hour();
  int minutoActual = now.minute();

  // Verificar itinerarios para Gate 1
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    if (itinerariosGate1[i].activo && horaActual == itinerariosGate1[i].horaApertura && minutoActual == itinerariosGate1[i].minutoApertura) {
      abrirGate1();
    } else if (itinerariosGate1[i].activo && horaActual == itinerariosGate1[i].horaCierre && minutoActual == itinerariosGate1[i].minutoCierre) {
      cerrarGate1();
    }
  }

  // Verificar itinerarios para Gate 2
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    if (itinerariosGate2[i].activo && horaActual == itinerariosGate2[i].horaApertura && minutoActual == itinerariosGate2[i].minutoApertura) {
      abrirGate2();
    } else if (itinerariosGate2[i].activo && horaActual == itinerariosGate2[i].horaCierre && minutoActual == itinerariosGate2[i].minutoCierre) {
      cerrarGate2();
    }
  }
}

void handleRoot() {
  DateTime now = rtc.now();
  String date = String(now.day()) + "/" + String(now.month()) + "/" + String(now.year());
  String time = String(now.hour()) + ":" + String(now.minute()) + ":" + String(now.second());

  // Crear la lista de itinerarios para Gate 1
  String horariosGate1 = "<div style='flex: 1; margin: 10px; padding: 10px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'>";
  horariosGate1 += "<h2>Gate 1</h2>";
  horariosGate1 += "<ul style='list-style-type: none; padding: 0;'>";
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    if (itinerariosGate1[i].activo) {
      horariosGate1 += "<li style='margin: 10px 0; padding: 10px; background-color: #fff; border-radius: 5px; box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);'>";
      horariosGate1 += "<strong>Itinerary " + String(i + 1) + ":</strong><br>";
      horariosGate1 += "Opening: " + String(itinerariosGate1[i].horaApertura) + ":" + (itinerariosGate1[i].minutoApertura < 10 ? "0" : "") + String(itinerariosGate1[i].minutoApertura) + "<br>";
      horariosGate1 += "Closing: " + String(itinerariosGate1[i].horaCierre) + ":" + (itinerariosGate1[i].minutoCierre < 10 ? "0" : "") + String(itinerariosGate1[i].minutoCierre);
      horariosGate1 += "</li>";
    }
  }
  horariosGate1 += "</ul></div>";

  // Crear la lista de itinerarios para Gate 2
  String horariosGate2 = "<div style='flex: 1; margin: 10px; padding: 10px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);'>";
  horariosGate2 += "<h2>Gate 2</h2>";
  horariosGate2 += "<ul style='list-style-type: none; padding: 0;'>";
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    if (itinerariosGate2[i].activo) {
      horariosGate2 += "<li style='margin: 10px 0; padding: 10px; background-color: #fff; border-radius: 5px; box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);'>";
      horariosGate2 += "<strong>Itinerary " + String(i + 1) + ":</strong><br>";
      horariosGate2 += "Opening: " + String(itinerariosGate2[i].horaApertura) + ":" + (itinerariosGate2[i].minutoApertura < 10 ? "0" : "") + String(itinerariosGate2[i].minutoApertura) + "<br>";
      horariosGate2 += "Closing: " + String(itinerariosGate2[i].horaCierre) + ":" + (itinerariosGate2[i].minutoCierre < 10 ? "0" : "") + String(itinerariosGate2[i].minutoCierre);
      horariosGate2 += "</li>";
    }
  }
  horariosGate2 += "</ul></div>";

  // Construir la página principal
  String html = "<html><head><style>";
  html += "body { font-family: Arial, sans-serif; text-align: center; background-color: #e0e0e0; margin: 0; padding: 20px; }";
  html += "h1 { color: #333; }";
  html += "button { margin: 10px; padding: 10px 20px; border: none; border-radius: 5px; color: #fff; background-color: #007bff; cursor: pointer; }";
  html += "button:hover { background-color: #0056b3; }";
  html += "div.container { display: flex; justify-content: space-between; margin: 20px 0; }";
  html += "div.schedule { flex: 1; margin: 10px; padding: 10px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }";
  html += "ul { list-style-type: none; padding: 0; }";
  html += "li { margin: 10px 0; padding: 10px; background-color: #fff; border-radius: 5px; box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); }";
  html += "</style></head><body>";
  html += "<h1>Feeder 1</h1>";
  html += "<div><span>Date: " + date + "</span></div>";
  html += "<div><span>Time: " + time + "</span></div>";
  html += "<p>Opening Schedule:</p>";
  html += "<div class='container'>";
  html += horariosGate1;
  html += horariosGate2;
  html += "</div>";
  html += "<button onclick=\"window.location.href='/settime'\">Set Date and Time</button>";
  html += "<button onclick=\"window.location.href='/configurarCompuerta'\">Configure Gate</button>";
  html += "<button onclick=\"window.location.href='/testCompuerta'\">Gate Test</button>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void handleTime() {
  DateTime now = rtc.now();
  String html = "<html><body><h1>Actual time</h1>";
  html += "<p>Actual time is: " + String(now.hour()) + ":" + String(now.minute()) + ":" + String(now.second()) + "</p>";
  html += "<button onclick=\"window.location.href='/settime'\">Set time</button>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void handleSetTime() {
  if (server.hasArg("date") && server.hasArg("time")) {
    String dateStr = server.arg("date");
    String timeStr = server.arg("time");

    int day = dateStr.substring(0, 2).toInt();
    int month = dateStr.substring(3, 5).toInt();
    int year = dateStr.substring(6).toInt();
    int hour = timeStr.substring(0, 2).toInt();
    int minute = timeStr.substring(3, 5).toInt();
    int second = timeStr.substring(6).toInt();

    rtc.adjust(DateTime(year, month, day, hour, minute, second));

    server.send(200, "text/plain", "Date and time updated:" + dateStr + " " + timeStr);
  } else {
    String dateTime = String(rtc.now().day()) + "/" + String(rtc.now().month()) + "/" + String(rtc.now().year()) + " " + String(rtc.now().hour()) + ":" + String(rtc.now().minute()) + ":" + String(rtc.now().second());

    String html = "<html><head><style>";
    html += "body { font-family: Arial, sans-serif; text-align: center; background-color: #e0e0e0; }";
    html += "h1 { color: #333; }";
    html += "button { margin: 10px; padding: 10px 20px; border: none; border-radius: 5px; color: #fff; background-color: #007bff; cursor: pointer; }";
    html += "button:hover { background-color: #0056b3; }";
    html += "</style></head><body>";
    html += "<h1>Set Date and Time</h1>";
    html += "<div><span>Current date and time: " + dateTime + "</span></div>";
    html += "<form action=\"/settime\" method=\"get\">";
    html += "<label for=\"date\">Date (dd/mm/yyyy):</label>";
    html += "<input type=\"text\" id=\"date\" name=\"date\"><br><br>";
    html += "<label for=\"time\">Time (hh:mm:ss):</label>";
    html += "<input type=\"text\" id=\"time\" name=\"time\"><br><br>";
    html += "<input type=\"submit\" value=\"Save\">";
    html += "</form>";
    html += "</body></html>";
    server.send(200, "text/html", html);
  }
}

void handleConfigurarCompuerta() {
  String html = "<html><head><style>";
  html += "body { font-family: Arial, sans-serif; text-align: center; background-color: #e0e0e0; }";
  html += "h1 { color: #333; }";
  html += "button { margin: 10px; padding: 10px 20px; border: none; border-radius: 5px; color: #fff; background-color: #007bff; cursor: pointer; }";
  html += "button:hover { background-color: #0056b3; }";
  html += "div { margin: 20px 0; }";
  html += "span { display: block; margin: 10px 0; }";
  html += "</style></head><body>";
  html += "<h1>Configure Gate</h1>";
  html += "<form action=\"/guardarConfiguracion\" method=\"get\">";

  // Configuración para Gate 1
  html += "<h2>Gate 1</h2>";
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    html += "<div>";
    html += "<input type='checkbox' name='activoG1_" + String(i) + "' " + (itinerariosGate1[i].activo ? "checked" : "") + "> Enable Itinerary " + String(i + 1) + "<br>";
    html += "Opening time: <input type='time' name='horaAperturaG1_" + String(i) + "' value='" + (itinerariosGate1[i].horaApertura != -1 ? String(itinerariosGate1[i].horaApertura) + ":" + String(itinerariosGate1[i].minutoApertura) : "") + "'><br>";
    html += "Closing time: <input type='time' name='horaCierreG1_" + String(i) + "' value='" + (itinerariosGate1[i].horaCierre != -1 ? String(itinerariosGate1[i].horaCierre) + ":" + String(itinerariosGate1[i].minutoCierre) : "") + "'><br>";
    html += "</div>";
  }

  // Configuración para Gate 2
  html += "<h2>Gate 2</h2>";
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    html += "<div>";
    html += "<input type='checkbox' name='activoG2_" + String(i) + "' " + (itinerariosGate2[i].activo ? "checked" : "") + "> Enable Itinerary " + String(i + 1) + "<br>";
    html += "Opening time: <input type='time' name='horaAperturaG2_" + String(i) + "' value='" + (itinerariosGate2[i].horaApertura != -1 ? String(itinerariosGate2[i].horaApertura) + ":" + String(itinerariosGate2[i].minutoApertura) : "") + "'><br>";
    html += "Closing time: <input type='time' name='horaCierreG2_" + String(i) + "' value='" + (itinerariosGate2[i].horaCierre != -1 ? String(itinerariosGate2[i].horaCierre) + ":" + String(itinerariosGate2[i].minutoCierre) : "") + "'><br>";
    html += "</div>";
  }

  html += "<input type=\"submit\" value=\"Save\">";
  html += "</form>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void handleGuardarConfiguracion() {
  for (int i = 0; i < MAX_ITINERARIOS; i++) {
    // Guardar configuración para Gate 1
    itinerariosGate1[i].activo = server.arg("activoG1_" + String(i)) == "on";
    String aperturaG1 = server.arg("horaAperturaG1_" + String(i));
    String cierreG1 = server.arg("horaCierreG1_" + String(i));
    if (aperturaG1.length() > 0) {
      itinerariosGate1[i].horaApertura = aperturaG1.substring(0, 2).toInt();
      itinerariosGate1[i].minutoApertura = aperturaG1.substring(3, 5).toInt();
    } else {
      itinerariosGate1[i].horaApertura = -1;
      itinerariosGate1[i].minutoApertura = -1;
    }
    if (cierreG1.length() > 0) {
      itinerariosGate1[i].horaCierre = cierreG1.substring(0, 2).toInt();
      itinerariosGate1[i].minutoCierre = cierreG1.substring(3, 5).toInt();
    } else {
      itinerariosGate1[i].horaCierre = -1;
      itinerariosGate1[i].minutoCierre = -1;
    }

    // Guardar configuración para Gate 2
    itinerariosGate2[i].activo = server.arg("activoG2_" + String(i)) == "on";
    String aperturaG2 = server.arg("horaAperturaG2_" + String(i));
    String cierreG2 = server.arg("horaCierreG2_" + String(i));
    if (aperturaG2.length() > 0) {
      itinerariosGate2[i].horaApertura = aperturaG2.substring(0, 2).toInt();
      itinerariosGate2[i].minutoApertura = aperturaG2.substring(3, 5).toInt();
    } else {
      itinerariosGate2[i].horaApertura = -1;
      itinerariosGate2[i].minutoApertura = -1;
    }
    if (cierreG2.length() > 0) {
      itinerariosGate2[i].horaCierre = cierreG2.substring(0, 2).toInt();
      itinerariosGate2[i].minutoCierre = cierreG2.substring(3, 5).toInt();
    } else {
      itinerariosGate2[i].horaCierre = -1;
      itinerariosGate2[i].minutoCierre = -1;
    }
  }
  server.send(200, "text/plain", "Saved Configuration");
}

void handleTestCompuerta() {
  String html = "<html><head><style>";
  html += "body { font-family: Arial, sans-serif; text-align: center; background-color: #e0e0e0; }";
  html += "h1 { color: #333; }";
  html += "button { padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }";
  html += "button:hover { background-color: #0056b3; }";
  html += "</style></head><body>";
  html += "<h1>Gate Test</h1>";
  html += "<button onclick=\"window.location.href='/abrirGate1'\">Open Gate 1</button><br><br>";
  html += "<button onclick=\"window.location.href='/cerrarGate1'\">Close Gate 1</button><br><br>";
  html += "<button onclick=\"window.location.href='/abrirGate2'\">Open Gate 2</button><br><br>";
  html += "<button onclick=\"window.location.href='/cerrarGate2'\">Close Gate 2</button><br><br>";
  html += "<button onclick=\"window.location.href='/'\">Back to Main Menu</button>"; // Botón para volver al menú principal
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void abrirGate1() {
  gateServo1.write(anguloAperturaGate1);
  delay(1000);  // Delay to allow the servo to move
  server.send(200, "text/html", "<html><body><h1>Gate 1 Open</h1><button onclick=\"window.location.href='/testCompuerta'\">Back to test</button></body></html>");
}

void cerrarGate1() {
  gateServo1.write(anguloCierreGate1);
  delay(1000);  // Delay to allow the servo to move
  server.send(200, "text/html", "<html><body><h1>Gate 1 closed</h1><button onclick=\"window.location.href='/testCompuerta'\">Back to test</button></body></html>");
}

void abrirGate2() {
  gateServo2.write(anguloAperturaGate2);
  delay(1000);  // Delay to allow the servo to move
  server.send(200, "text/html", "<html><body><h1>Gate 2 Open</h1><button onclick=\"window.location.href='/testCompuerta'\">Back to test</button></body></html>");
}

void cerrarGate2() {
  gateServo2.write(anguloCierreGate2);
  delay(1000);  // Delay to allow the servo to move
  server.send(200, "text/html", "<html><body><h1>Gate 2 closed</h1><button onclick=\"window.location.href='/testCompuerta'\">Back to test</button></body></html>");
}